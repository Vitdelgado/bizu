import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

// Verificar se as vari√°veis est√£o configuradas
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Configura√ß√µes do Supabase n√£o encontradas!');
  console.error('URL:', supabaseUrl ? '‚úÖ Configurada' : '‚ùå Faltando');
  console.error('Anon Key:', supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå Faltando');
  console.error('');
  console.error('üìù Para configurar:');
  console.error('1. Crie um arquivo .env.local na raiz do projeto');
  console.error('2. Adicione as seguintes vari√°veis:');
  console.error('   NEXT_PUBLIC_SUPABASE_URL=https://seu-projeto.supabase.co');
  console.error('   NEXT_PUBLIC_SUPABASE_ANON_KEY=sua_chave_anonima');
  console.error('');
  console.error('üîó Obtenha essas informa√ß√µes em: https://supabase.com > Seu Projeto > Settings > API');
  
  // Em desenvolvimento, n√£o vamos quebrar a aplica√ß√£o, apenas mostrar o erro
  if (process.env.NODE_ENV === 'development') {
    console.warn('‚ö†Ô∏è  Aplica√ß√£o continuar√° funcionando, mas sem conex√£o com o Supabase');
  } else {
    throw new Error('Configura√ß√µes do Supabase n√£o encontradas. Verifique as vari√°veis NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY');
  }
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Verificar se a conex√£o est√° funcionando
if (supabaseUrl && supabaseAnonKey) {
  console.log('‚úÖ Supabase configurado com sucesso');
  console.log('üîó URL:', supabaseUrl);
} 
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  console.log('Certifique-se de que o arquivo .env.local existe com:');
  console.log('NEXT_PUBLIC_SUPABASE_URL=...');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY=...');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTables() {
  console.log('üîç Verificando tabelas do banco de dados...\n');

  const tables = [
    'bizus',
    'users', 
    'bizu_likes',
    'bizu_edits',
    'audit_logs'
  ];

  for (const tableName of tables) {
    try {
      console.log(`üìã Verificando tabela: ${tableName}`);
      
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå Erro na tabela ${tableName}:`, error.message);
        
        // Verificar se √© erro de tabela n√£o existente
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          console.log(`   ‚Üí Tabela ${tableName} n√£o existe!`);
        }
      } else {
        console.log(`‚úÖ Tabela ${tableName} existe`);
        
        // Verificar estrutura da tabela bizus
        if (tableName === 'bizus') {
          const { data: columns, error: columnsError } = await supabase
            .rpc('get_table_columns', { table_name: tableName })
            .catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }));
          
          if (!columnsError && columns) {
            console.log(`   ‚Üí Colunas: ${columns.map(c => c.column_name).join(', ')}`);
          }
        }
      }
    } catch (err) {
      console.log(`‚ùå Erro ao verificar ${tableName}:`, err.message);
    }
    console.log('');
  }

  // Verificar se a coluna likes existe na tabela bizus
  console.log('üîç Verificando coluna likes na tabela bizus...');
  try {
    const { data, error } = await supabase
      .from('bizus')
      .select('likes')
      .limit(1);

    if (error) {
      console.log('‚ùå Coluna likes n√£o encontrada:', error.message);
    } else {
      console.log('‚úÖ Coluna likes existe na tabela bizus');
    }
  } catch (err) {
    console.log('‚ùå Erro ao verificar coluna likes:', err.message);
  }

  console.log('\nüîç Verificando RLS (Row Level Security)...');
  try {
    const { data: rlsData, error: rlsError } = await supabase
      .from('bizus')
      .select('*')
      .limit(1);

    if (rlsError && rlsError.message.includes('new row violates row-level security policy')) {
      console.log('‚ö†Ô∏è RLS est√° ativo (isso √© normal para usu√°rios an√¥nimos)');
    } else if (rlsError) {
      console.log('‚ùå Erro de RLS:', rlsError.message);
    } else {
      console.log('‚úÖ RLS configurado corretamente');
    }
  } catch (err) {
    console.log('‚ùå Erro ao verificar RLS:', err.message);
  }

  console.log('\nüîç Verificando fun√ß√µes...');
  try {
    const { data: functions, error: functionsError } = await supabase
      .rpc('get_top_bizus_by_likes', { limit_count: 1 })
      .catch(() => ({ data: null, error: 'Fun√ß√£o n√£o dispon√≠vel' }));

    if (functionsError) {
      console.log('‚ùå Fun√ß√£o get_top_bizus_by_likes n√£o encontrada:', functionsError.message);
    } else {
      console.log('‚úÖ Fun√ß√£o get_top_bizus_by_likes existe');
    }
  } catch (err) {
    console.log('‚ùå Erro ao verificar fun√ß√µes:', err.message);
  }

  console.log('\nüéØ Resumo das verifica√ß√µes conclu√≠do!');
}

checkTables().catch(console.error); 
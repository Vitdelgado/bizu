const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  console.error('URL:', supabaseUrl ? '‚úÖ Configurada' : '‚ùå Faltando');
  console.error('Service Key:', supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå Faltando');
  console.error('');
  console.error('üìù Para configurar a Service Role Key:');
  console.error('1. V√° para https://supabase.com > Seu Projeto > Settings > API');
  console.error('2. Copie a "service_role" key (n√£o a anon key)');
  console.error('3. Adicione ao .env.local: SUPABASE_SERVICE_ROLE_KEY=sua_service_key');
  process.exit(1);
}

// Usar service role key para contornar RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function checkUsersWithServiceRole() {
  console.log('üîç Verificando usu√°rios com Service Role (contorna RLS)...\n');

  try {
    // 1. Verificar usu√°rios na tabela users
    console.log('üìã 1. Verificando tabela users...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, name, role, created_at')
      .order('created_at', { ascending: false });

    if (usersError) {
      console.log('‚ùå Erro na tabela users:', usersError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados na tabela users:', users?.length || 0);
      if (users && users.length > 0) {
        console.log('üìã Lista de usu√°rios:');
        users.forEach((user, index) => {
          console.log(`   ${index + 1}. ${user.email} (${user.role}) - ${user.name || 'Sem nome'}`);
        });
      }
    }

    // 2. Verificar usu√°rios no Supabase Auth
    console.log('\nüìã 2. Verificando usu√°rios no Supabase Auth...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();

    if (authError) {
      console.log('‚ùå Erro ao listar usu√°rios do Auth:', authError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados no Auth:', authUsers?.users?.length || 0);
      if (authUsers?.users && authUsers.users.length > 0) {
        console.log('üìã Lista de usu√°rios do Auth:');
        authUsers.users.forEach((user, index) => {
          const confirmed = user.email_confirmed_at ? '‚úÖ Confirmado' : '‚ùå N√£o confirmado';
          console.log(`   ${index + 1}. ${user.email} - ${confirmed} - ${user.created_at}`);
        });
      }
    }

    // 3. Verificar se h√° discrep√¢ncia entre Auth e tabela users
    console.log('\nüìã 3. Verificando discrep√¢ncias...');
    if (users && authUsers?.users) {
      const authEmails = authUsers.users.map(u => u.email);
      const tableEmails = users.map(u => u.email);
      
      const onlyInAuth = authEmails.filter(email => !tableEmails.includes(email));
      const onlyInTable = tableEmails.filter(email => !authEmails.includes(email));
      
      if (onlyInAuth.length > 0) {
        console.log('‚ö†Ô∏è Usu√°rios apenas no Auth (n√£o est√£o na tabela users):');
        onlyInAuth.forEach(email => console.log(`   - ${email}`));
      }
      
      if (onlyInTable.length > 0) {
        console.log('‚ö†Ô∏è Usu√°rios apenas na tabela users (n√£o est√£o no Auth):');
        onlyInTable.forEach(email => console.log(`   - ${email}`));
      }
      
      if (onlyInAuth.length === 0 && onlyInTable.length === 0) {
        console.log('‚úÖ Todos os usu√°rios est√£o sincronizados entre Auth e tabela users');
      }
    }

    // 4. Verificar pol√≠ticas RLS da tabela users
    console.log('\nüìã 4. Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_table_policies', { table_name: 'users' })
      .catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }));

    if (policiesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas via RPC');
      console.log('üìù Verifique manualmente no SQL Editor:');
      console.log('SELECT schemaname, tablename, policyname, permissive, cmd, qual, with_check FROM pg_policies WHERE tablename = \'users\';');
    } else {
      console.log('‚úÖ Pol√≠ticas RLS encontradas:', policies?.length || 0);
      if (policies && policies.length > 0) {
        policies.forEach((policy, index) => {
          console.log(`   ${index + 1}. ${policy.policyname} - ${policy.cmd}`);
        });
      }
    }

    console.log('\nüéØ Verifica√ß√£o conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

checkUsersWithServiceRole().catch(console.error); 
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Service Role Key n√£o encontrada');
  console.error('üìù Adicione SUPABASE_SERVICE_ROLE_KEY ao .env.local');
  process.exit(1);
}

// Usar service role para opera√ß√µes administrativas
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function explainUsersTables() {
  console.log('üìö Explicando as Tabelas de Usu√°rios...\n');

  try {
    // 1. Verificar tabela auth.users (Supabase Auth)
    console.log('üìã 1. TABELA auth.users (Supabase Auth):');
    console.log('   üîê Gerenciada automaticamente pelo Supabase');
    console.log('   üìù Cont√©m: email, senha, confirma√ß√£o, tokens, etc.');
    console.log('   üö´ N√£o pode ser modificada diretamente');
    console.log('   üîó Usada para autentica√ß√£o e sess√µes\n');

    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erro ao listar usu√°rios do Auth:', authError.message);
    } else {
      console.log(`   üë• Total de usu√°rios no Auth: ${authUsers.users.length}`);
      authUsers.users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} - ${user.email_confirmed_at ? '‚úÖ Confirmado' : '‚ùå N√£o confirmado'}`);
      });
    }

    // 2. Verificar tabela public.users (Tabela personalizada)
    console.log('\nüìã 2. TABELA public.users (Tabela personalizada):');
    console.log('   üéØ Criada por voc√™ para o projeto');
    console.log('   üìù Cont√©m: role, nome, telefone, dados espec√≠ficos');
    console.log('   ‚úèÔ∏è Pode ser modificada e consultada');
    console.log('   üîó Referenciada por outras tabelas do projeto\n');

    const { data: publicUsers, error: publicError } = await supabase
      .from('users')
      .select('*');

    if (publicError) {
      console.error('‚ùå Erro ao listar usu√°rios da tabela users:', publicError.message);
    } else {
      console.log(`   üë• Total de usu√°rios na tabela users: ${publicUsers.length}`);
      publicUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (${user.role}) - ${user.name || 'Sem nome'}`);
      });
    }

    // 3. Verificar sincroniza√ß√£o
    console.log('\nüìã 3. SINCRONIZA√á√ÉO ENTRE AS TABELAS:');
    
    if (authUsers && publicUsers) {
      const authEmails = authUsers.users.map(u => u.email);
      const publicEmails = publicUsers.map(u => u.email);
      
      const onlyInAuth = authEmails.filter(email => !publicEmails.includes(email));
      const onlyInPublic = publicEmails.filter(email => !authEmails.includes(email));
      const inBoth = authEmails.filter(email => publicEmails.includes(email));
      
      console.log(`   ‚úÖ Em ambas as tabelas: ${inBoth.length}`);
      inBoth.forEach(email => console.log(`      - ${email}`));
      
      if (onlyInAuth.length > 0) {
        console.log(`   ‚ö†Ô∏è Apenas no Auth: ${onlyInAuth.length}`);
        onlyInAuth.forEach(email => console.log(`      - ${email}`));
      }
      
      if (onlyInPublic.length > 0) {
        console.log(`   ‚ö†Ô∏è Apenas na tabela users: ${onlyInPublic.length}`);
        onlyInPublic.forEach(email => console.log(`      - ${email}`));
      }
    }

    // 4. Verificar trigger de sincroniza√ß√£o
    console.log('\nüìã 4. TRIGGER DE SINCRONIZA√á√ÉO:');
    console.log('   üîÑ Quando um usu√°rio se registra no Auth, um trigger deve criar o perfil na tabela users');
    console.log('   üìù Trigger: handle_new_user()');
    console.log('   üéØ Executa: AFTER INSERT ON auth.users\n');

    // 5. Verificar se o trigger existe
    const { data: triggers, error: triggerError } = await supabase.rpc('get_table_triggers', {
      table_name: 'auth.users'
    }).catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }));

    if (triggerError) {
      console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel verificar triggers via RPC');
      console.log('   üìù Verifique manualmente no SQL Editor:');
      console.log('   SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = \'users\' AND trigger_schema = \'auth\';');
    } else {
      console.log('   ‚úÖ Triggers encontrados:', triggers?.length || 0);
      triggers?.forEach(trigger => {
        console.log(`      - ${trigger.trigger_name}: ${trigger.event_manipulation}`);
      });
    }

    // 6. Explicar o fluxo
    console.log('\nüìã 5. FLUXO DE AUTENTICA√á√ÉO:');
    console.log('   1. Usu√°rio se registra ‚Üí auth.users');
    console.log('   2. Trigger executa ‚Üí cria perfil em public.users');
    console.log('   3. Usu√°rio faz login ‚Üí Supabase Auth gerencia sess√£o');
    console.log('   4. Aplica√ß√£o consulta ‚Üí public.users para dados do perfil');
    console.log('   5. RLS protege ‚Üí public.users baseado no auth.uid()');

    // 7. Verificar problemas comuns
    console.log('\nüìã 6. PROBLEMAS COMUNS:');
    console.log('   ‚ùå Trigger n√£o existe ‚Üí usu√°rio no Auth mas n√£o na tabela users');
    console.log('   ‚ùå RLS mal configurado ‚Üí n√£o consegue inserir/consultar');
    console.log('   ‚ùå Pol√≠ticas conflitantes ‚Üí opera√ß√µes bloqueadas');
    console.log('   ‚ùå Sess√£o expirada ‚Üí auth.uid() retorna null');

    // 8. Verificar RLS da tabela users
    console.log('\nüìã 7. RLS DA TABELA users:');
    const { data: rlsStatus, error: rlsError } = await supabase.rpc('get_table_rls_status', {
      table_name: 'users'
    }).catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }));

    if (rlsError) {
      console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel verificar RLS via RPC');
      console.log('   üìù Verifique manualmente:');
      console.log('   SELECT rowsecurity FROM pg_tables WHERE tablename = \'users\';');
    } else {
      console.log('   ‚úÖ RLS verificado:', rlsStatus);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

explainUsersTables().catch(console.error); 